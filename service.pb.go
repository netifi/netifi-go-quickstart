// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import (
	context "context"
	errors "errors"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	scheduler "github.com/jjeffcaii/reactor-go/scheduler"
	rsocket_go "github.com/rsocket/rsocket-go"
	payload "github.com/rsocket/rsocket-go/payload"
	rx "github.com/rsocket/rsocket-go/rx"
	flux "github.com/rsocket/rsocket-go/rx/flux"
	mono "github.com/rsocket/rsocket-go/rx/mono"
	rsocket_rpc_go "github.com/rsocket/rsocket-rpc-go"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "service.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "service.HelloResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb8,
	0x78, 0x3c, 0x52, 0x73, 0x72, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8,
	0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x4d,
	0x2e, 0x5e, 0xa8, 0x9a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4,
	0xe2, 0xe2, 0xc4, 0x74, 0x98, 0x3a, 0x18, 0xd7, 0xc8, 0x1b, 0x6a, 0x5c, 0x30, 0xc4, 0x78, 0x21,
	0x6b, 0x2e, 0x8e, 0xe0, 0xc4, 0x4a, 0xb0, 0x90, 0x90, 0xa8, 0x1e, 0xcc, 0x0d, 0xc8, 0x36, 0x4a,
	0x89, 0xa1, 0x0b, 0x43, 0x2c, 0x51, 0x62, 0x70, 0xb2, 0xe0, 0x52, 0x4b, 0xce, 0xcf, 0xd5, 0xcb,
	0x4b, 0x2d, 0xc9, 0x4c, 0xcb, 0xd4, 0x2b, 0x2c, 0xcd, 0x4c, 0xce, 0x2e, 0x2e, 0x49, 0x2c, 0x2a,
	0xd1, 0x43, 0xf1, 0x4b, 0x52, 0x69, 0x9a, 0x13, 0x0f, 0xd4, 0xbe, 0x00, 0x90, 0x40, 0x00, 0x63,
	0x12, 0x1b, 0x58, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x59, 0x94, 0xe8, 0x3b, 0xf6, 0x00,
	0x00, 0x00,
}
var _ context.Context
var _ rsocket_rpc_go.ClientConn
var _ rsocket_go.RSocket
var _ rx.Subscription
var _ flux.Flux
var _ mono.Mono
var _ payload.Payload
var _ scheduler.Scheduler

// -- Constants
const HelloServiceServiceName = "service.HelloService"
const SayHelloFunctionName = "SayHello"

// -- client start
type HelloServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...rsocket_rpc_go.CallOption) (<-chan *HelloResponse, <-chan error)
}

type HelloServiceClientStruct struct {
	HelloServiceClient
	client rsocket_rpc_go.ClientConn
}

func (c *HelloServiceClientStruct) SayHello(ctx context.Context, in *HelloRequest, opts ...rsocket_rpc_go.CallOption) (<-chan *HelloResponse, <-chan error) {
	response := make(chan *HelloResponse, 1)
	err := make(chan error, 1)
	defer func() {
		close(response)
		close(err)
	}()
	d, e := proto.Marshal(in)
	if e != nil {
		return nil, err
	}

	payloads, errors := c.client.InvokeRequestResponse(ctx, HelloServiceServiceName, SayHelloFunctionName, &d, opts...)
loop:
	for {
		select {
		case p, ok := <-payloads:
			if ok {
				i := payload.Payload(p)
				data := i.Data()
				res := &HelloResponse{}
				e := proto.Unmarshal(data, res)
				if e != nil {
					err <- e
					break loop
				} else {
					response <- res
				}
			} else {
				break loop
			}
		case e := <-errors:
			if err != nil {
				err <- e
				break loop
			}
		}
	}

	return response, err
}

func NewHelloServiceClient(s rsocket_go.RSocket, m rsocket_rpc_go.MeterRegistry, t rsocket_rpc_go.Tracer) HelloServiceClient {
	cc := *rsocket_rpc_go.NewClientConn(s, m, t)
	return &HelloServiceClientStruct{client: cc}
}

// -- client end

// -- server start
type HelloService interface {
	SayHello(context.Context, *HelloRequest, []byte) (<-chan *HelloResponse, <-chan error)
}

type HelloServiceServer struct {
	pp HelloService
	rsocket_rpc_go.RrpcRSocket
}

func (p *HelloServiceServer) Name() string {
	return HelloServiceServiceName
}

func (p *HelloServiceServer) RequestResponse(msg payload.Payload) mono.Mono {
	return mono.Create(func(ctx context.Context, sink mono.Sink) {
		d := msg.Data()
		m, ok := msg.Metadata()
		if !ok {
			sink.Error(errors.New("RSocket rpc: missing metadata in Payload for HelloService service"))
			return
		}
		metadata := (rsocket_rpc_go.Metadata)(m)
		method := metadata.Method()
		ud := metadata.Metadata()
		switch method {
		case SayHelloFunctionName:
			_in0 := &HelloRequest{}
			e := proto.Unmarshal(d, _in0)
			if e != nil {
				sink.Error(e)
				return
			}
			defer func() {
				if err := recover(); err != nil {
					sink.Error(fmt.Errorf("Error calling %s function: %s", SayHelloFunctionName, err))
				}
			}()
			_out0, err := p.pp.SayHello(ctx, _in0, ud)
		_loop0:
			for {
				select {
				case <-ctx.Done():
				case r, ok := <-_out0:
					if ok {
						bytes, e := proto.Marshal(r)
						if e != nil {
							sink.Error(e)
						} else {
							sink.Success(payload.New(bytes, nil))
							break _loop0
						}
					} else {
						break _loop0
					}
				case e := <-err:
					if e != nil {
						sink.Error(e)
					}
				}
			}
		}
	})
}

func (p *HelloServiceServer) RequestStream(msg payload.Payload) flux.Flux {
	panic("request stream not implemented")
}

func (p *HelloServiceServer) RequestChannel(msgs rx.Publisher) flux.Flux {
	panic("request channel not implemented")
}

func NewHelloServiceServer(p HelloService) *HelloServiceServer {
	return &HelloServiceServer{
		pp: p,
	}
}
